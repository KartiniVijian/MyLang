/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\MyLangParser.jj */
/*@egen*/options {
               
                 
                      
}

PARSER_BEGIN(MyLangParser)

import java.util.HashSet;
import java.util.Set;
import java.util.HashMap;
import java.util.Map;

public class MyLangParser/*@bgen(jjtree)*/implements MyLangParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTMyLangParserState jjtree = new JJTMyLangParserState();

/*@egen*/
    public static Set<String> declaredVariables = new HashSet<String>();
    public static Map<String, String> variables = new HashMap<String, String>();
    public static boolean executeBlock = true;

    public static void main(String[] args) throws Exception {
        MyLangParser parser = new MyLangParser(new java.io.FileInputStream("example.simp"));
        ASTProgram root = parser.Program();
        root.jjtAccept(new InterpreterVisitor(), null);
    }
}

PARSER_END(MyLangParser)

SKIP : { " " | "\t" | "\n" | "\r" }

TOKEN : { <WENZI: "wenzi"> | <CETAK: "cetak"> | <EGER: "eger"> | <NEMESE: "nemese"> | <ULANG: "ulang"> | <KALI: "kali"> | <SURA: "sura"> }
TOKEN : { <LPAR: "(" > | <RPAR: ")" > | <LBRA: "{" > | <RBRA: "}" > | <SEMI: ";" > | <COMMA: "," > | <ASN: "=" > | <PLUS: "+"> }
TOKEN : { <EQ: "=="> | <NEQ: "!="> | <LT: "<"> | <GT: ">"> | <LE: "<="> | <GE: ">="> }
TOKEN : { <STRING: "\"" (~["\"","\\","\n","\r"])* "\""> | <DIGIT: "0" | ["1"-"9"] (["0"-"9"])* > }
TOKEN : { <VAR: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* > }

ASTProgram Program()          : {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) Program */
    try {
/*@egen*/
    ( Statement() )* <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Statement()            : {/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) Statement */
    try {
/*@egen*/
    StringDeclaration() | Assignment() | IfStatement() | PrintStatement() | LoopStatement() | InputStatement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void StringDeclaration()                    : {/*@bgen(jjtree) StringDeclaration */
  ASTStringDeclaration jjtn000 = new ASTStringDeclaration(JJTSTRINGDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) StringDeclaration */
    try {
/*@egen*/
    <WENZI> Var() <ASN> Expression() <SEMI>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Assignment()             : {/*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) Assignment */
    try {
/*@egen*/
    Var() <ASN> Expression() <SEMI>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void IfStatement()              : {/*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) IfStatement */
    try {
/*@egen*/
    <EGER> <LPAR> Condition() <RPAR> <LBRA> Block() <RBRA>
    [<NEMESE> <LBRA> Block() <RBRA>]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Block()        : {/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) Block */
    try {
/*@egen*/
    ( Statement() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Condition()            : {/*@bgen(jjtree) Condition */
  ASTCondition jjtn000 = new ASTCondition(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) Condition */
    try {
/*@egen*/
    Printable() CompOperator() Printable()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


void CompOperator()               : {/*@bgen(jjtree) CompOperator */
                                      ASTCompOperator jjtn000 = new ASTCompOperator(JJTCOMPOPERATOR);
                                      boolean jjtc000 = true;
                                      jjtree.openNodeScope(jjtn000);
                                      jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t; }
{/*@bgen(jjtree) CompOperator */
    try {
/*@egen*/
    (
        t = <EQ> 
        | t = <NEQ> 
        | t = <LT> 
        | t = <GT> 
        | t = <LE> 
        | t = <GE>
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
        jjtn000.setToken(t);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void PrintStatement()                 : {/*@bgen(jjtree) PrintStatement */
  ASTPrintStatement jjtn000 = new ASTPrintStatement(JJTPRINTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) PrintStatement */
    try {
/*@egen*/
    <CETAK> <LPAR> ( Printable() (<COMMA> Printable())* )? <RPAR> <SEMI>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Printable()            : {/*@bgen(jjtree) Printable */
  ASTPrintable jjtn000 = new ASTPrintable(JJTPRINTABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) Printable */
    try {
/*@egen*/
    StringLiteral() | Var()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void LoopStatement()                : {/*@bgen(jjtree) LoopStatement */
  ASTLoopStatement jjtn000 = new ASTLoopStatement(JJTLOOPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) LoopStatement */
    try {
/*@egen*/
    <ULANG> PrintableValue() <KALI> <LBRA> (Statement())* <RBRA>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void InputStatement()                 : {/*@bgen(jjtree) InputStatement */
  ASTInputStatement jjtn000 = new ASTInputStatement(JJTINPUTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) InputStatement */
    try {
/*@egen*/
    <SURA> Var() <SEMI>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Expression()             : {/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) Expression */
    try {
/*@egen*/
    PrintableValue() (<PLUS> PrintableValue())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void PrintableValue()                 : {/*@bgen(jjtree) PrintableValue */
                                          ASTPrintableValue jjtn000 = new ASTPrintableValue(JJTPRINTABLEVALUE);
                                          boolean jjtc000 = true;
                                          jjtree.openNodeScope(jjtn000);
                                          jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t; } {/*@bgen(jjtree) PrintableValue */
    try {
/*@egen*/
    (
        t = <STRING>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
                     }
/*@egen*/ { jjtn000.setToken(t); }
      | t = <VAR>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
                     }
/*@egen*/    { jjtn000.setToken(t); }
      | t = <DIGIT>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
                     }
/*@egen*/  { jjtn000.setToken(t); }
    )/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void StringLiteral()                : {/*@bgen(jjtree) StringLiteral */
                                        ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);
                                        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t; } {/*@bgen(jjtree) StringLiteral */
    try {
/*@egen*/
    t = <STRING>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
        jjtn000.setToken(t);
        
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Var()      : {/*@bgen(jjtree) Var */
                    ASTVar jjtn000 = new ASTVar(JJTVAR);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t; } {/*@bgen(jjtree) Var */
    try {
/*@egen*/
    t = <VAR>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
        jjtn000.setToken(t);
       
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}